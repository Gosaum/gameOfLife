classDiagram
    %% Game of Life
    class GOL {
        +startGame()
    }

    class UnitTest {
        +runTests()
    }

    class grid {
        <<Abstract>>
        # Cell ***grid
        # unsigned int n
        # unsigned int p
        # std::vector<Cell*> aliveCells

        + unsigned int getN()
        + unsigned int getP()
        + std::vector<Cell*> getAliveCells()
        + void updateAliveCells()
        + void updateAliveCells(std::vector<Cell*> toggledCells)

        (virtual) + std::vector<Cell*> mooreNeighborhood(Cell* cell)
    }

    class cell {
        <<Abstract>>
        # bool alive
        - unsigned int x
        - unsigned int y
        + bool isAlive()
        + unsigned int getX()
        + unsigned int getY()

        (virtual) + void toggleAlive()
        (virtual) + bool computeNextState(const unsigned int *livingNeighborsCount)
    }

    class standardCell {
        + void toggleAlive()
        + bool computeNextState(const unsigned int *livingNeighborsCount)
    }

    class TorGrid {
        + std::vector<Cell*> mooreNeighborhood(Cell* cell)
    }

    class standardGrid {
        + std::vector<Cell*> mooreNeighborhood(Cell* cell)
    }

    class obstacleCell {
        + void toggleAlive()
        + bool computeNextState(const unsigned int *livingNeighborsCount)
    }

    class GUI {
        +showInitialMenu()
        +createCustomGrid()
        +startSimulation()
    }

    class Console {
        +runConsoleMode()
    }



    class ErrorHandler {
        +showError(message: String)
    }

    class FileHandler {
        +saveGridToFile(grid: grid, filename: String)
        +loadGridFromFile(filename: String): grid
    }

    class GridFactory {
        <<Factory>>
        +createGrid(type: String): grid
    }

    class CellFactory {
        <<Factory>>
        +createCell(type: String): cell
    }

    class gameSettings {
        +unsigned int maxIterations
        +bool isToroidal
        +void setMaxIterations(unsigned int)
        +void toggleToroidalMode()
    }

    class Renderer {
        +renderGrid(grid: grid)
    }

    GOL ..> UnitTest : Utilise
    GOL --> GridFactory : Utilise
    GOL --> CellFactory : Utilise
    GOL --> GUI : Association
    GOL ..> gameSettings : Dépendance

    CellFactory --> cell : Crée
    cell <|-- obstacleCell : Héritage
    cell <|-- standardCell : Héritage

    Renderer --> grid : Rend

    GridFactory --> grid : Crée
    grid <|-- TorGrid : Héritage
    grid <|-- standardGrid : Héritage
    grid --* cell : Composition

    Console ..> FileHandler : Utilise

    GUI --> Console
    GUI ..> ErrorHandler : Utilise
    GUI ..> FileHandler : Utilise
    GUI --> Renderer
    GUI --> gameSettings

    Console ..> ErrorHandler : Utilise
